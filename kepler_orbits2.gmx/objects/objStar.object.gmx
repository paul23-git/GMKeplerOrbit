<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2
y = room_height/2;
orbits = ds_list_create();
planets = ds_map_create();
mass = 1.9891 * power(10,27)
image_blend = c_yellow;
var scale = power(10, -5);
draw_set_font(font0);
AU = 1.4960 * power(10,8)
var delta_step = 2*power(10, 1)//86400*365.21/240
star_radius = 695800
//tmp = 9.9 * power(10,-11) //NOT SUBNORMAL AT ALL, NOT EVEN CLOSE!
//v = 1/tmp;

randomize();
draw_set_circle_precision(64);
draw_offset_x = x;
draw_offset_y = y;

math_set_epsilon(power(10,-10));
sys = create_solar_system_new(orbits, planets, mass, scale, delta_step);

star = K_System_GetMainStar(sys);
following = true;
current_focus = K_System_FindObject(sys, "64p/Hale Bopp");
repeat(6) {
    K_System_Update(sys);
}



/*previewer = instance_create(0,0, objPreviewer);
previewer.other_obj = id;
create_previewer_anchors(previewer, sys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

K_System_Destroy(sys);

ds_list_destroy(orbits);
ds_map_destroy(planets);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

K_System_Update(sys);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale = K_System_GetScale(sys);
var delta_step = K_System_GetDeltaTime(sys);
if (following) {
    p = K_Obj_GetPos(current_focus);
    draw_offset_x = room_width/2-p[0] *scale //+ 
    draw_offset_y = room_height/2-p[1] *scale
    //show_message(draw_offset_x);
    //K_Star_ChangePos(K_System_GetMainStar(sys), p[0] - room_width/(2*scale), p[1] - room_height/(2*scale));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>following = false
draw_offset_y += 8;;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>following = false
draw_offset_x += 8;;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>following = false
draw_offset_y -= 8;;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>following = false
draw_offset_x -= 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale = K_System_GetScale(sys);
var delta_step = K_System_GetDeltaTime(sys);

if (keyboard_check(vk_space)) {
    K_System_SetDeltaTime(sys, K_System_GetDeltaTime(sys) /1.1)
} else {
    var newscale = scale/ 1.1;
    if (newscale &gt; 0) {
        var mouse_X = (mouse_x - draw_offset_x);
        var mouse_Y = (mouse_y - draw_offset_y); 
        draw_offset_x = mouse_x  - mouse_X / 1.1
        draw_offset_y = mouse_y  - mouse_Y / 1.1
        scale = newscale
        K_System_SetScale(sys, scale);
        var star = K_System_GetMainStar(sys);
        var p = K_Obj_GetPos(star);
        

    }
//    K_Star_ChangePos(star, p[0] + 0.1 * mouse_x/scale, p[1] + 0.1 * mouse_y/scale);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var scale = K_System_GetScale(sys);
var delta_step = K_System_GetDeltaTime(sys);

if (keyboard_check(vk_space)) {
    K_System_SetDeltaTime(sys, K_System_GetDeltaTime(sys) * 1.1)
} else {

    var newscale = scale *  1.1;
    var mouse_X = (mouse_x - draw_offset_x);
    var mouse_Y = (mouse_y - draw_offset_y); 
    draw_offset_x = mouse_x  - mouse_X * 1.1
    draw_offset_y = mouse_y  - mouse_Y * 1.1
    scale = newscale;
    K_System_SetScale(sys, scale);
    var star = K_System_GetMainStar(sys);
    //var p = K_Obj_GetPos(star);


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var atp;
var scale = K_System_GetScale(sys);
var delta_step = K_System_GetDeltaTime(sys);

current_focus = K_System_GetMainStar(sys)
var p = K_Obj_GetPos(current_focus);
var r = 10;
if (point_distance(p[0] * scale  + draw_offset_x, p[1] * scale + draw_offset_y, mouse_x, mouse_y) &lt;= r)  {
    following = true;
} else {
    following = false;
}




var planet;


var tlist = ds_list_create();
K_System_GetAllChilds(sys, star, tlist);

for (var i = 0; i &lt; ds_list_size(tlist); ++i) {
    planet = ds_list_find_value(tlist, i);
    p = K_Obj_GetPos(planet);
    var planet_inf = planets[? planet];
    
    var r = planet_inf[2]*scale
    if (r &lt; 2) {
        r = 2;
    }
    r+=4;
    if (point_distance(p[0] * scale  + draw_offset_x, p[1] * scale + draw_offset_y, mouse_x, mouse_y) &lt;= r) {
        current_focus = planet;
        following = true;
        return 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(image_blend)
draw_set_alpha(image_alpha)
//d3d_transform_add_translation(draw_offset_x, draw_offset_y, 0);
var scale = K_System_GetScale(sys);
var delta_step = K_System_GetDeltaTime(sys);




var l = K_Obj_GetLevel(current_focus) +1;
if (current_focus &gt;= 0 &amp;&amp; K_Obj_IsPlanet(current_focus)) {
    draw_set_alpha(1);
    
    var p = K_Obj_GetPos(current_focus);
    var r = K_Planet_CalcSOI(current_focus);
    var r2 = K_Planet_CalcHillSphere(current_focus);
    if (r &gt; r2) {
        draw_set_colour(c_blue);
        draw_circle(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, r*scale, false);
        draw_set_colour(c_green);
        draw_circle(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, r2*scale, false);
    } else {
        draw_set_colour(c_green);
        draw_circle(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, r2*scale, false);
        draw_set_colour(c_blue);
        draw_circle(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, r*scale, false);
    }
}




var star = K_System_GetMainStar(sys)
var p = K_Obj_GetPos(star);
var r = max(5,star_radius*scale);
draw_set_alpha(1);
draw_set_colour(c_yellow);
var tot_mass = mass;

draw_sprite_stretched(sprSun, 0, draw_offset_x+p[0]*scale - r, draw_offset_y+p[1]*scale - r, r*2, r*2);

var tlist = ds_list_create();
var dbg;
K_System_GetAllChilds(sys, star, tlist);
for (var i = ds_list_size(tlist) - 1; i &gt;= 0 --i) {
    var planet = ds_list_find_value(tlist, i);
    var planet_inf = planets[? planet];
    var p = K_Obj_GetPos(planet);
    var r = planet_inf[2]*scale
    if (r &lt; 3) {
        r = 3;
    }
    var central_body = K_Planet_GetCentralBody(planet);
    var distance = K_Obj_CalcDistanceBetween(planet, central_body);
    if (distance * scale &lt; 6) {
        continue;
    }
    
    if (planet == current_focus) {
        draw_set_colour(c_white);
    } else {
        draw_set_colour(c_yellow)
    }
    var orbit = K_Obj_GetOrbit(planet);
    K_Orbit_DrawOrbit(orbit, scale, draw_offset_x, draw_offset_y);
    if (planet_inf[3] == noone) {
        draw_set_colour(planet_inf[1]);
        draw_circle(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, r, false);
    } else {
        //draw_text(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale,string(planet_inf[3]))
        draw_sprite_stretched(planet_inf[3], 0, draw_offset_x+p[0]*scale - r, draw_offset_y+p[1]*scale - r, r*2, r*2);
    }
    
    dbg = planet_inf[0];
    if ((K_Obj_GetLevel(planet) &lt; l || (K_Obj_GetLevel(planet) == l &amp;&amp; K_System_IsSatellite(current_focus, planet)))) {
        draw_set_color(c_white)
        if (current_focus == planet) {
            var orbit = K_Obj_GetOrbit(planet);
            var nu = K_Obj_GetTrueAnomaly(planet);
            var ifty = power(10, 1000);
            var E = K_Orbit_TrueToEccentricAnomaly(orbit, nu);
            var M = K_Orbit_EccentricToMeanAnomaly(orbit, E);
            var kepler_object = planet[| K_OBJ_KOO];
            if (M - _K_M_CalcMeanAnomalyFromTime(kepler_object, K_Obj_TimeSinceEpoch(planet)) &gt; 0.000001) {
            //show_message(string(M) + "   " + string(_K_M_CalcMeanAnomalyFromTime(kepler_object, K_Obj_TimeSinceEpoch(planet))));
            }
            var r = K_Orbit_GetRadius(orbit, nu);
            var v = K_Planet_CalcSpeed(planet);
            var d = K_Planet_CalcDirection(planet);
            var l = 10*v;
            var TM = _K_M_CalcMeanAnomalyFromTime(kepler_object, K_Obj_TimeSinceEpoch(planet));
            var TE = K_Orbit_MeanToEccentricAnomaly(orbit, TM);
            if (abs(M-TM) &gt; 0.001) {
                tmp_debug(planet, sys);                
            }
            dbg += "  Period: " + string(K_Planet_GetPeriod(planet)/(86400*365.21)) + "#Anomalies, mean:" + string(TM) + "    " + string(M) + "  Ecc:"+ string(TE) + "    " + string(E) + "   True:" + string(nu);
            dbg += "#Speed: " + string(v) + "  dir: " + string(radtodeg( d));
            draw_arrow(x,y,x + l * cos(d),y + l * sin(d),5);
            var tttp = K_Orbit_GetOrbitCenter(orbit);
            draw_circle(draw_offset_x + tttp[0]*scale, draw_offset_y + tttp[1]*scale, 5, false);
        }
        
        
        
        draw_text(draw_offset_x+p[0]*scale, draw_offset_y+p[1]*scale, dbg)
    }
}



ds_list_destroy(tlist);
if (current_focus != K_System_GetMainStar(sys)) {
    var current_planet = planets[? current_focus];
    current_name = current_planet[0]
} else {
    var current_name = "star";
}

dbg = "Mouse: ("+ string(mouse_x/scale - draw_offset_x/scale)  + "," + string(mouse_y/scale - draw_offset_y/scale) +")" +  
                "# scale: " + string_format_scientific(scale, 4) + " px/km" +
                "# Time multiplier: " + string_format_scientific(delta_step* room_speed, 4)  +
                "#current focus: " + current_name;
test = mouse_x / scale - draw_offset_x /scale;
d3d_transform_set_identity();
draw_text(0,0, dbg);




























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var planet = K_System_FindObject(sys, "Jupiter");

K_System_RemovePlanet(sys, planet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
